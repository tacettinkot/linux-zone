# Hands-on : Filters 

**cat**

- concatenate files and print on the standard output
- Create a folder and name it filters.

```bash
mkdir filters
cd filters
```

- Create a `text` file named `days.txt`.

```bash
vim days.txt
```


```bash
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
Sunday
```

- Display the content of days.txt.

```bash
cat days.txt
```

- Show what cat command does when used in a pipe.

```bash
cat days.txt | cat | cat | cat | cat
```

- Create a `text` file named `count.txt`.

```bash
nano count.txt
```

```text
one
two
three
four
five
six
seven
eight
nine
ten
eleven 
```

- Display the content of count.txt.

```bash
cat count.txt
```

**tee**

- Read from standard input and write to standard output and files
- Write the content of the count.txt file in reverse order to another file named temp.txt and display the content of temp.txt in reverse order.

```bash
tac count.txt | tee temp.txt | tac
```

- Check whether the temp.txt file created and display the content.

```bash
ls
cat temp.txt
```

**grep**

- Print lines that match patterns. The most common use of grep is to filter lines of text containing (or not containing) a certain string.
- Create a `text` file named `tennis.txt`.

```bash
cat > tennis.txt

Amelie Mauresmo, Fra
Justine Henin, BEL
Serena Williams, USA
Venus Williams, USA
```

> **press ctrl+d for EOF**

- Display the content of tennis.txt.

```bash
cat tennis.txt
```

- Display only the lines of tennis.txt that includes 'Williams'.

```bash
cat tennis.txt | grep Williams
```

- Display only the lines of tennis.txt that includes 'us'.

```bash
cat tennis.txt | grep us
```

- Display the owners column (3rd column) of all the files in current directory.

  **cut**
- The cut filter can select columns from files, depending on a delimiter or a count of bytes

```bash
ls -l | cut -d' ' -f3
```

- Display the content of /etc/passwd directory.

```bash
cat /etc/passwd
```

- Display only the usernames.

```bash
cut -d: -f1 /etc/passwd
```

**tr**

- The command 'tr' stands for 'translateâ€™. It is used to translate, like from lowercase to uppercase and vice versa or new lines into spaces.
- Create a `text` file named `clarusway.txt`.

```bash
cat << EOF > clarusway.txt
Clarusway:Road to reinvent yourself.
EOF
```

- Display the content of clarusway.txt.

```bash
cat clarusway.txt
```

- In the content of clarusway.txt, replace or translate aer letters with 'QAZ'.

```bash
cat clarusway.txt | tr aer QAZ
```


- Write the content of count.txt on the same line.

```bash
cat count.txt | tr '\n' ' '
```


- Delete all the vowels in the content of clarusway.txt.

```bash
cat clarusway.txt | tr -d aeiou
```


- Write the whole content of clarusway.txt in capital letters.

```bash
cat clarusway.txt | tr [a-z] [A-Z]
```

**wc**

- Print line, word, and charecters for each file.
- Count the lines, words and letters of the content of count.txt.

```bash

wc count.txt
```

- Find how many users are there in the computer.

```bash
wc -l /etc/passwd
```

**sort**

- The sort filter will default to an alphabetical sort. The sort filter will default to an alphabetical sort.
- Create a `text` file named `marks.txt`.

```bash
cat << EOF > marks.txt
aeron-9
albert-9
james-9
john-10
oliver-7
tom-7
victor-10
walter-8
EOF
```

- Display the content of marks.txt.

```bash
cat marks.txt
```

- Sort the content of marks.txt.

```bash
sort marks.txt
```

- Sort the content of marks.txt in reverse order.

```bash
sort -r marks.txt
```

**uniq**

- report or omit repeated lines. With the help of uniq command you can form a sorted list in which every word will occur only once.
- Create a `text` file named `trainees.txt`.

```bash
cat << EOF > trainees.txt
john
james
aeron
oliver
walter
albert
james
john
travis
mike
aeron
thomas
daniel
john
aeron
oliver
mike
john
EOF
```

- Display the content of trainees.txt.

```bash
cat trainees.txt
```

- Display only the unique names in the content of trainees.txt.

  ******before using uniq command, the file must be sorted******

```bash
sort trainees.txt | uniq
```

**comm**

- Compare two sorted files line by line. By default, `comm` will always display three columns.
  First column indicates non-matching items of first file, second column indicates non-matching items
  of second file, and third column indicates matching items of both the files.
- Both the files has to be in sorted order for 'comm' command to be executed.
- Create a `text` file named `file1.txt`.

```bash
cat << EOF > file1.txt
Aeron
Bill
James
John
Oliver
Walter
EOF
```

- Create another `text` file named `file2.txt`.

```bash
cat << EOF > file2.txt
Guile
James
John
Raymond
EOF
```

- Compare file1.txt and file2.txt.

  ******before using comm command, files must be sorted******

```bash
comm file1.txt file2.txt
```

- EXERCISE:
  - Create a file named `countries.csv`.

```bash
cat << EOF > countries.csv
Country,Capital,Continent
USA,Washington,North America
France,Paris,Europe
Canada,Ottawa,North America
Germany,Berlin,Europe
EOF
```

- Cut only 'Continent' column | Remove header | Sort the output | List distinct values | Save it to 'continent.txt' and display on the screen.

```bash
********************************
```